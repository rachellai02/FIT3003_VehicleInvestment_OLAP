-- Task C.1
-- creating tables by copying the tables from operational database
DROP TABLE FACULTY CASCADE CONSTRAINTS PURGE;
CREATE TABLE FACULTY AS
SELECT * FROM MONCITY.FACULTY;

DROP TABLE RESEARCHCENTER CASCADE CONSTRAINTS PURGE;
CREATE TABLE RESEARCHCENTER AS
SELECT * FROM MONCITY.RESEARCHCENTER;

DROP TABLE PASSENGER CASCADE CONSTRAINTS PURGE;
CREATE TABLE PASSENGER AS
SELECT * FROM MONCITY.PASSENGER;

DROP TABLE ERROR CASCADE CONSTRAINTS PURGE;
CREATE TABLE ERROR AS
SELECT * FROM MONCITY.ERROR;

DROP TABLE MAINTENANCETYPE CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAINTENANCETYPE AS
SELECT * FROM MONCITY.MAINTENANCETYPE;

DROP TABLE BOOKING CASCADE CONSTRAINTS PURGE;
CREATE TABLE BOOKING AS
SELECT * FROM MONCITY.BOOKING;

DROP TABLE CAR CASCADE CONSTRAINTS PURGE;
CREATE TABLE CAR AS
SELECT * FROM MONCITY.CAR;

DROP TABLE MAINTENANCE CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAINTENANCE AS
SELECT * FROM MONCITY.MAINTENANCE;

DROP TABLE ACCIDENTINFO CASCADE CONSTRAINTS PURGE;
CREATE TABLE ACCIDENTINFO AS
SELECT * FROM MONCITY.ACCIDENTINFO;

DROP TABLE CARACCIDENT CASCADE CONSTRAINTS PURGE;
CREATE TABLE CARACCIDENT AS
SELECT * FROM MONCITY.CARACCIDENT;

DROP TABLE MAINTENANCETEAM CASCADE CONSTRAINTS PURGE;
CREATE TABLE MAINTENANCETEAM AS
SELECT * FROM MONCITY.MAINTENANCETEAM;

DROP TABLE BELONGTO CASCADE CONSTRAINTS PURGE;
CREATE TABLE BELONGTO AS
SELECT * FROM MONCITY.BELONGTO;

-- data exploration
SELECT * FROM FACULTY;
SELECT * FROM RESEARCHCENTER;
SELECT * FROM PASSENGER;
SELECT * FROM ERROR;
SELECT * FROM MAINTENANCETYPE;
SELECT * FROM BOOKING;
SELECT * FROM CAR;
SELECT * FROM MAINTENANCE;
SELECT * FROM ACCIDENTINFO;
SELECT * FROM CARACCIDENT;
SELECT * FROM MAINTENANCETEAM;
SELECT * FROM BELONGTO;


-- Strategies for data exploration and cleaning
-- 1. Check if there are any invalid records that exist in one table but not in another

--check if there are invalid records in FACULTY table
SELECT * FROM FACULTY;

-- check if there are invalid records in RESEARCHCENTER table;
SELECT * FROM RESEARCHCENTER;

-- check if there are invalid records in PASSENGER table;
SELECT * FROM PASSENGER;
SELECT * FROM PASSENGER ORDER BY PASSENGERID;
SELECT PASSENGERROLE, COUNT(*) FROM PASSENGER GROUP BY PASSENGERROLE;
SELECT PASSENGERGENDER, COUNT(*) FROM PASSENGER GROUP BY PASSENGERGENDER;
SELECT * FROM PASSENGER WHERE FACULTYID NOT IN (SELECT FACULTYID FROM FACULTY); --error found!
-- ERROR 1: Faculty id for passenger U163 does not exist in the faculty table

-- To fix this, delete this record from the PASSENGER table since it does not affect other tables
SELECT * FROM BOOKING WHERE PASSENGERID = 'U163';
DELETE FROM PASSENGER WHERE PASSENGERID = 'U163';
-- check the table again
SELECT * FROM PASSENGER WHERE FACULTYID NOT IN (SELECT FACULTYID FROM FACULTY);


-- check if there are invalid records in ERROR table;
SELECT * FROM ERROR;

-- check if there are invalid records in MAINTENANCETYPE table;
SELECT * FROM MAINTENANCETYPE;

-- check if there are invalid records in BOOKING table;
SELECT * FROM BOOKING;
SELECT * FROM BOOKING WHERE REGISTRATIONNO NOT IN (SELECT REGISTRATIONNO FROM CAR);
SELECT * FROM BOOKING WHERE DEPARTUREZONE NOT IN (SELECT ZONE FROM FACULTY);
SELECT * FROM BOOKING WHERE DESTINATIONZONE NOT IN (SELECT ZONE FROM FACULTY);
SELECT * FROM BOOKING WHERE PASSENGERID NOT IN (SELECT PASSENGERID FROM PASSENGER);

-- check if there are invalid records in CAR table;
SELECT * FROM CAR;
SELECT CARBODYTYPE, COUNT(*) FROM CAR GROUP BY CARBODYTYPE;

-- check if there are invalid records in MAINTENANCE table;
SELECT * FROM MAINTENANCE ORDER BY MAINTENANCEID;
SELECT * FROM MAINTENANCE WHERE REGISTRATIONNO NOT IN (SELECT REGISTRATIONNO FROM CAR);
SELECT * FROM MAINTENANCE WHERE MAINTENANCETYPE NOT IN (SELECT MAINTENANCETYPE FROM MAINTENANCETYPE);
SELECT * FROM MAINTENANCE WHERE TEAMID NOT IN (SELECT TEAMID FROM MAINTENANCETEAM);

-- check if there are invalid records in ACCIDENTINFO table;
SELECT * FROM ACCIDENTINFO ORDER BY ACCIDENTID;
SELECT * FROM ACCIDENTINFO WHERE ACCIDENTZONE NOT IN (SELECT ZONE FROM FACULTY);
SELECT CAR_DAMAGE_SEVERITY, COUNT(*) FROM ACCIDENTINFO GROUP BY CAR_DAMAGE_SEVERITY;
SELECT * FROM ACCIDENTINFO WHERE ERRORCODE NOT IN (SELECT ERRORCODE FROM ERROR); -- error found!
-- ERROR 2: Invalid accident id ‘A2000’ found in ACCIDENTINFO table

-- To fix this, delete this record from the ACCIDENTINFO table since it does not affect other tables
SELECT * FROM CARACCIDENT WHERE ACCIDENTID = 'A2000';
DELETE FROM ACCIDENTINFO WHERE ACCIDENTID = 'A2000';
-- check the table again
SELECT * FROM PASSENGER WHERE FACULTYID NOT IN (SELECT FACULTYID FROM FACULTY);


-- check if there are invalid records in CARACCIDENT table;
SELECT * FROM CARACCIDENT;
SELECT * FROM CARACCIDENT WHERE REGISTRATIONNO NOT IN (SELECT REGISTRATIONNO FROM CAR);
SELECT * FROM CARACCIDENT WHERE ACCIDENTID NOT IN (SELECT ACCIDENTID FROM ACCIDENTINFO);

-- check if there are invalid records in MAINTENANCETEAM table;
SELECT * FROM MAINTENANCETEAM;

-- check if there are invalid records in BELONGTO table;
SELECT * FROM BELONGTO;
SELECT * FROM BELONGTO WHERE TEAMID NOT IN (SELECT TEAMID FROM MAINTENANCETEAM);
SELECT * FROM BELONGTO WHERE CENTERID NOT IN (SELECT CENTERID FROM RESEARCHCENTER);

-- 2. Check if there are duplicate records

--check if there are duplicate records in FACULTY table;
SELECT FACULTYID, COUNT(*) FROM FACULTY GROUP BY FACULTYID HAVING COUNT(*)>1;

-- check if there are duplicate records in RESEARCHCENTER table;
SELECT CENTERID, COUNT(*) FROM RESEARCHCENTER GROUP BY CENTERID HAVING COUNT(*)>1;

-- check if there are duplicate records in PASSENGER table;
SELECT PASSENGERID, COUNT(*) FROM PASSENGER GROUP BY PASSENGERID HAVING COUNT(*)>1;

-- check if there are duplicate records in ERROR table;
SELECT ERRORCODE, COUNT(*) FROM ERROR GROUP BY ERRORCODE HAVING COUNT(*)>1;

-- check if there are duplicate records in MAINTENANCETYPE table;
SELECT MAINTENANCETYPE, COUNT(*) FROM MAINTENANCETYPE GROUP BY MAINTENANCETYPE HAVING COUNT(*)>1;

-- check if there are duplicate records in BOOKING table;
SELECT BOOKINGID, COUNT(*) FROM BOOKING GROUP BY BOOKINGID HAVING COUNT(*)>1; --error found!
-- ERROR 3: Two duplicated booking ids ‘T1218’ in BOOKING table

-- To fix this, delete this record from the BOOKING table since it does not affect other tables
SELECT ROWID FROM BOOKING WHERE BOOKINGID='T1218';
SELECT MIN(ROWID) FROM BOOKING WHERE BOOKINGID='T1218';

DELETE FROM BOOKING
WHERE BOOKINGID='T1218' AND 
    ROWID NOT IN (
        SELECT MIN(ROWID)
        FROM BOOKING
        WHERE BOOKINGID='T1218');
-- check the table again
SELECT BOOKINGID, COUNT(*) FROM BOOKING GROUP BY BOOKINGID HAVING COUNT(*)>1; 

-- check if there are duplicate records in CAR table;
SELECT REGISTRATIONNO, COUNT(*) FROM CAR GROUP BY REGISTRATIONNO HAVING COUNT(*)>1;

-- check if there are duplicate records in MAINTENANCE table;
SELECT MAINTENANCEID, COUNT(*) FROM MAINTENANCE GROUP BY MAINTENANCEID HAVING COUNT(*)>1;

-- check if there are duplicate records in ACCIDENTINFO table;
SELECT ACCIDENTID, COUNT(*) FROM ACCIDENTINFO GROUP BY ACCIDENTID HAVING COUNT(*)>1;

-- check if there are duplicate records in MAINTENANCETEAM table;
SELECT TEAMID, COUNT(*) FROM MAINTENANCETEAM GROUP BY TEAMID HAVING COUNT(*)>1;

-- 3. Check if there are negative records (cost, age, numseats) 
--For opening hour, phone number if can easily manually check do we need to include? for to date also  
-- check if there are any invalid passenger age
SELECT * FROM PASSENGER WHERE PASSENGERAGE < 0;

-- check if there are any invalid manufacturing year
SELECT * FROM CAR WHERE MANUFACTURINGYEAR < 0;

-- check if there are any invalid number of seats
SELECT * FROM CAR WHERE NUMSEATS < 0;

-- check if there are any invalid maintenance cost
SELECT * FROM MAINTENANCE WHERE MAINTENANCECOST < 0; -- error found!

-- ERROR 4: Maintenance cost for Maintenance ID ‘M2000’ is a negative value
-- To fix this, delete this record from the MAINTENANCE table since it does not affect other tables
DELETE FROM MAINTENANCE WHERE MAINTENANCECOST < 0;
-- Check the table again
SELECT * FROM MAINTENANCE WHERE MAINTENANCECOST < 0;

-- 4. Check if there are null values in non-nullable columns (such as PK, FK)
-- check if there are any null faculty ID in FACULTY table
SELECT * FROM FACULTY WHERE FACULTYID IS NULL;

-- check if there are any null center ID in RESEARCHCENTER table
SELECT * FROM RESEARCHCENTER WHERE CENTERID IS NULL;

-- check if there are any null Passenger ID in PASSENGER table
SELECT * FROM PASSENGER WHERE PASSENGERID IS NULL;

-- check if there are any null Faculty ID in PASSENGER table
SELECT * FROM PASSENGER WHERE FACULTYID IS NULL;

-- check if there are any null Error code in ERROR table
SELECT * FROM ERROR WHERE ERRORCODE IS NULL;

-- check if there are any null Maintenance Type in MAINTENANCETYPE table
SELECT * FROM MAINTENANCETYPE WHERE MAINTENANCETYPE IS NULL;

-- check if there are any null Booking ID in BOOKING table
SELECT * FROM BOOKING WHERE BOOKINGID IS NULL;

-- check if there are any null Registration number in BOOKING table
SELECT * FROM BOOKING WHERE REGISTRATIONNO IS NULL;

-- check if there are any null Passenger ID in BOOKING table
SELECT * FROM BOOKING WHERE PASSENGERID IS NULL;

-- check if there are any null Registration number in CAR table
SELECT * FROM CAR WHERE REGISTRATIONNO IS NULL;

-- check if there are any null Maintenance ID in MAINTENANCE table
SELECT * FROM MAINTENANCE WHERE MAINTENANCEID IS NULL;

-- check if there are any null Registration number in MAINTENANCE table
SELECT * FROM MAINTENANCE WHERE REGISTRATIONNO IS NULL;

-- check if there are any null Maintenance Date in MAINTENANCE table
SELECT * FROM MAINTENANCE WHERE MAINTENANCEDATE IS NULL;

-- check if there are any null Maintenance Type in MAINTENANCE table
SELECT * FROM MAINTENANCE WHERE MAINTENANCETYPE IS NULL;

-- check if there are any null Team ID in MAINTENANCE table
SELECT * FROM MAINTENANCE WHERE TEAMID IS NULL;

-- check if there are any null Accident ID in ACCIDENTINFO table
SELECT * FROM ACCIDENTINFO WHERE ACCIDENTID IS NULL; -- Error found!

-- ERROR 5: Accident ID is a null value
-- To fix this, delete this record from the ACCIDENTINFO table since it does not appear in other tables that uses it such as CARACCIDENT
DELETE FROM ACCIDENTINFO WHERE ACCIDENTID IS NULL;
-- Check the table again
SELECT * FROM ACCIDENTINFO WHERE ACCIDENTID IS NULL; 

-- check if there are any null Error code in ACCIDENTINFO table
SELECT * FROM ACCIDENTINFO WHERE ERRORCODE IS NULL;

-- check if there are any null Registration number in CARACCIDENT table
SELECT * FROM CARACCIDENT WHERE REGISTRATIONNO IS NULL;

-- check if there are any null Accident ID in CARACCIDENT table
SELECT * FROM CARACCIDENT WHERE ACCIDENTID IS NULL;

-- check if there are any null Team ID in MAINTENANCETEAM table
SELECT * FROM MAINTENANCETEAM WHERE TEAMID IS NULL;

-- check if there are any null Team ID in BELONGTO table
SELECT * FROM BELONGTO WHERE TEAMID IS NULL;

-- check if there are any null Center ID in BELONGTO table
SELECT * FROM BELONGTO WHERE CENTERID IS NULL;